buildscript
{
	repositories
	{
		mavenCentral()
		mavenLocal()
		maven
		{
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven
		{
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven
		{
			name = "texasjake95Maven"
			url = "https://github.com/Texasjake95/maven-repo/raw/master/"
		}
	}
	dependencies
	{
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'com.texasjake95:GradlePlugin:1.1-SNAPSHOT'
		classpath 'com.texasjake95:MinecraftGradlePlugin:1.0-SNAPSHOT'
	}
}
apply plugin: 'forge'
apply plugin: 'texasjake95'
apply plugin: 'texasjake95-minecraft'
repositories
{
	/*maven
	 {
	 name = "texasjake95Maven"
	 url = "https://github.com/Texasjake95/maven-repo/raw/master/"
	 }*/
	maven
	{
		name =  "ChickenFileServer"
		url =   "http://www.chickenbones.net/maven/"
	}
	maven
	{
		name = "forge"
		url = "http://files.minecraftforge.net/maven"
	}
}


//Get Jenkins/Travis Build Number
ext.buildNumber = "dev"

if(System.getenv().BUILD_NUMBER)
	buildNumber = System.getenv().BUILD_NUMBER

if(System.getenv().TRAVIS_BUILD_NUMBER)
	buildNumber = System.getenv().TRAVIS_BUILD_NUMBER

version = "$minecraft_version-$mod_version.$buildNumber"
archivesBaseName = "TXCore"


minecraft {
	version = "$minecraft_version-$forge_version"
	if(file("../run").exists()) {
		assetDir = "../run/assets"
	} else {
		assetDir = "eclipse/assets"
	}
	replace '${version}', "$mod_version.$buildNumber"
}
println tasks.sourceMainJava.class
dependencies {
	
	compile group: "com.texasjake95", name: "Texasjake95Commons", version: "$commons_version", classifier:""
	
	compile group: "codechicken", name: "NotEnoughItems", version:"$minecraft_version-$nei_version", classifier:"dev"
	compile group: "codechicken", name: "NotEnoughItems", version:"$minecraft_version-$nei_version", classifier:"src"
	
	compile group: "codechicken", name: "CodeChickenCore", version:"$minecraft_version-$ccc_version", classifier:"dev"
	compile group: "codechicken", name: "CodeChickenCore", version:"$minecraft_version-$ccc_version", classifier:"src"
	
	compile group: "codechicken", name: "CodeChickenLib", version: "$minecraft_version-$ccl_version", classifier:"dev"
	compile group: "codechicken", name: "CodeChickenLib", version: "$minecraft_version-$ccl_version", classifier:"src"
	
	//compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	
	//compile "codechicken:ForgeMultipart:${minecraft_version}-${fmp_version}:dev"
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

//task devJar(type: Jar) {
//	classifier "dev"
//	from sourceSets.main.output
//	
//	from (sourceSets.main.java){ expand 'version':"$mod_version.$buildNumber" }
//}

//artifacts {
//	archives devJar
//	
//}

//build.dependsOn devJar

uploadArchives {
	dependsOn 'reobf'
	dependsOn 'build'
	repositories {
		
		if(project.hasProperty("filesmaven"))
		{
			mavenDeployer {
				logger.info("Pushing to Maven Remote")
				repository(url: project.filesmaven)
				pom {
					groupId = project.group
					version = project.version
					artifactId = project.archivesBaseName
					project {
						name project.archivesBaseName
						packaging 'jar'
						description 'Library for Texasjake95\'s mods'
						url 'https://github.com/Texasjake95/Texasjake95Core'
						
						scm {
							url 'https://github.com/Texasjake95/Texasjake95Core'
							connection 'scm:git:git://github.com/Texasjake95/Texasjake95Core.git'
							developerConnection 'scm:git:git@github.com:Texasjake95/Texasjake95Core.git'
						}
						
						issueManagement {
							system 'github'
							url 'https://github.com/Texasjake95/Texasjake95Core/issues'
						}
						
						developers {
							developer {
								id 'Texasjake95'
								name 'Texasjake95'
								roles { role 'developer' }
							}
						}
					}
				}
			}
		}
		else{
			logger.info("Pushing to Maven Local")
			mavenDeployer {
				repository(url: project.repositories.mavenLocal().url)
			}
		}
	}
}

def find(project, depName) {
	return project.configurations.default.find { it.name.contains(depName) }
}

processResources
{
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod/info'
		// replace version and mcversion
		expand 'version': "$mod_version.$buildNumber", 'mcversion': "$minecraft_version"
	}
	
	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

atSetup.addAT(find(project,"NotEnoughItems-$minecraft_version-$nei_version-dev"),"nei_at.cfg",file("${buildDir}/unpacked/NEI/"))

modSetup.addMod(find(project, "CodeChickenCore-$minecraft_version-$ccc_version-dev"))
modSetup.addMod(find(project, "NotEnoughItems-$minecraft_version-$nei_version-dev"))
modSetup.addMod(find(project, "CodeChickenLib-$minecraft_version-$ccl_version-dev"))

eclipseSetup.addEclipseSetup("CodeChickenCore-$minecraft_version-$ccc_version", "dev", "src")
eclipseSetup.addEclipseSetup("CodeChickenLib-$minecraft_version-$ccl_version", "dev", "src")
eclipseSetup.addEclipseSetup("NotEnoughItems-$minecraft_version-$nei_version", "dev", "src")